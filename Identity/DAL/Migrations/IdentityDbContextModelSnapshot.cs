// <auto-generated />
using System;
using Identity.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.DAL.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Identity.DAL.Relationships.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "Identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = "3188a971-25cb-4d5e-b317-81251b78012b",
                            UserId = "b77b129b-884f-49b4-bb5b-6237fe702246"
                        },
                        new
                        {
                            Id = 2,
                            RoleId = "3188a971-25cb-4d5e-b317-81251b78012b",
                            UserId = "6f01392c-45b1-4dbf-9457-74a107fe6ada"
                        });
                });

            modelBuilder.Entity("Identity.DAL.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("RoleGrupId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", "Identity");

                    b.HasData(
                        new
                        {
                            Id = "3188a971-25cb-4d5e-b317-81251b78012b",
                            RoleGrupId = 1,
                            RoleName = "developer"
                        });
                });

            modelBuilder.Entity("Identity.DAL.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("text");

                    b.Property<string>("RefresToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SecurityKey")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("SecurityKeyExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UserNameConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("UserState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", "Identity");

                    b.HasData(
                        new
                        {
                            Id = "b77b129b-884f-49b4-bb5b-6237fe702246",
                            Email = "john.doe@example.com",
                            MobilePhone = "+1234567890",
                            Name = "John",
                            OfficePhone = "+0987654321",
                            Password = "Qns/cVv2lW92XVEdx2z/Dv7YRrDpKqvX7Fgc7tbqDQw=",
                            ProfileImageUrl = "https://example.com/profiles/john.jpg",
                            ProfileUrl = "https://example.com/john",
                            RefresToken = "some-random-token",
                            RefreshTokenExpire = new DateTimeOffset(new DateTime(2024, 9, 29, 18, 57, 42, 379, DateTimeKind.Unspecified).AddTicks(8890), new TimeSpan(0, 3, 0, 0, 0)),
                            SecurityKey = new Guid("0a6414ca-0b43-49b6-b982-d91da5500bbf"),
                            SecurityKeyExpiryDate = new DateTimeOffset(new DateTime(2024, 10, 22, 18, 57, 42, 379, DateTimeKind.Unspecified).AddTicks(8920), new TimeSpan(0, 3, 0, 0, 0)),
                            SurName = "Doe",
                            Unit = "IT Department",
                            UserName = "jd",
                            UserNameConfirmed = true,
                            UserState = 0
                        },
                        new
                        {
                            Id = "6f01392c-45b1-4dbf-9457-74a107fe6ada",
                            Email = "jane.smith@example.com",
                            MobilePhone = "+1987654321",
                            Name = "Jane",
                            OfficePhone = "+1123456789",
                            Password = "Qns/cVv2lW92XVEdx2z/Dv7YRrDpKqvX7Fgc7tbqDQw=",
                            ProfileImageUrl = "https://example.com/profiles/jane.jpg",
                            ProfileUrl = "https://example.com/jane",
                            RefresToken = "another-random-token",
                            RefreshTokenExpire = new DateTimeOffset(new DateTime(2024, 9, 27, 18, 57, 42, 383, DateTimeKind.Unspecified).AddTicks(4390), new TimeSpan(0, 3, 0, 0, 0)),
                            SecurityKey = new Guid("132a5a02-30ec-4857-9e9a-38a78231c604"),
                            SecurityKeyExpiryDate = new DateTimeOffset(new DateTime(2024, 11, 22, 18, 57, 42, 383, DateTimeKind.Unspecified).AddTicks(4400), new TimeSpan(0, 3, 0, 0, 0)),
                            SurName = "Smith",
                            Unit = "HR Department",
                            UserName = "js",
                            UserNameConfirmed = false,
                            UserState = 0
                        });
                });

            modelBuilder.Entity("Identity.DAL.Relationships.UserRole", b =>
                {
                    b.HasOne("Identity.DAL.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Identity.DAL.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
